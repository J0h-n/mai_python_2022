# -*- coding: utf-8 -*-
"""HW_2_python!

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BdLX1WbUFGRTq-vgVJIr49Da4hbr3bX3
"""

import json

"""Напоминание: вам понадобится материал лекций: 3 - Списки и кортежи 4 - Словари и множества 7 и 8 - Классы 9 - Работа с файлами

ЗАДАНИЕ 1: Работа с файлами

TODO 1-1 Прочитайте данные из файла pilot_path.json (лекция 9)
"""

f = open('pilot_path.json')
data = json.load(f)

"""
ЗАДАНИЕ 2: Расчет статистик

TODO 2-1) Подсчитайте, сколько миссий налетал каждый пилот. Выведите результат в порядке убывания миссий ИНФОРМАЦИЯ: структура данных в файле: {"имя_пилота": "список_миссий":[миссия1, ...]] структура одной миссии: {"drone":"модель_дрона", "mission":[список точек миссии]} у пилотов неодинаковое количество миссий (и миссии могут быть разной длины). у каждой миссии - произвольная модель дрона"""

data.keys()
# print(len(data['missions'][0]['mission']))

missionlist={}
for p in data.keys():
	missionlist[p] = (len(data[p]['missions']))
print(f"Пилоты в порядке убывания количества миссий: {dict(sorted(missionlist.items(), key=lambda item: item[1], reverse=True))}")

"""
TODO 2-2) Получите и выведите список всех моделей дронов, которые были в файле pilot_path.json Подсказка: внутри print используйте str.join(), чтобы соединить элементы списка (множества)"""

drone_list = []
for p in data.keys():
    print(p)
    for x in data[p]['missions']:
        drone_list.append(x['drone'])

print(f'Полеты совершались на дронах следующих моделей: {", ".join(set(drone_list))}')

"""
TODO 2-3) Получите список миссий для каждой модели дронов, которые были в файле pilot_path.json, и выведите на экран модель дрона и количество миссий, которые он отлетал"""

for x in set(drone_list):
    print(f'Дрон {x} отлетал {drone_list.count(x)} миссий')

"""
ЗАДАНИЕ 3: Создание классов

Для вас уже написаны заготовки классов Aircraft и UAV

TODO 3-1) Добавьте в класс UAV защищенный атрибут _=_missions (тип - список списков [[], []]), куда вы будете сохранять все миссии, которые отлетал беспилотник

TODO 3-2) При помощи декоратора @property сделайте возможность чтения и записи миссий в этот атрибут (лекция 8)

TODO 3-3) Создайте в классе UAV публичный метод count_missions, который возвращает количество миссий (лекция 7)

TODO 3-4) Создайте класс MultirotorUAV - наследник классов Aircraft и UAV (лекция 7)"""

class Aircraft:
    def __init__(self, weight):
        self._weight = weight
        
class UAV:
    def __init__(self):
        self._has_autopilot = True
        self._missions = []
        
    @property
    def missions(self):
        return self._missions
    
    @missions.setter
    def missions(self, lst):
        self._missions.append(lst)
        
    def count_missions(self):
        return len(self._missions)

class MultirotorUAV(Aircraft, UAV):
    def __init__(self, weight, model, brand):
        super().__init__(weight)
        UAV.__init__(self)
        self.__weight = weight
        self.__model = model
        self.__brand = brand
        
    def get_info(self):
        return f'Информация: {self.get_model()}: масса {self.__weight}, производитель {self.__brand}, количество миссий {self.count_missions()}'
    
    def get_model(self):
        return self.__model

drone_catalog = {
	"DJI Mavic 2 Pro": {"weight":903, "brand":"DJI"},
	"DJI Mavic 2 Zoom": {"weight":900, "brand":"DJI"},
	"DJI Mavic 2 Enterprise Advanced": {"weight":920, "brand":"DJI"},
	"DJI Inspire 2": {"weight":1500, "brand":"DJI"},
	"DJI Mavic 3": {"weight":1000, "brand":"DJI"}
}

"""
ЗАДАНИЕ 4: Работа с экземплярами классов

TODO 4-1) Создайте экземпляры класса MultirotorUAV для всех моделей дронов, которые были в файле pilot_path.json

Подсказка: созданные экземпляры класса MultirotorUAV сохраните в список для последующего использования

TODO 4-2) При создании каждого экземпляра задайте ему как приватные атрибуты массу и производителя из справочника дронов drone_catalog в соответствии с моделью дрона

TODO 4-3) А также добавьте ему миссии, найденные для этой модели дрона на шаге 2-3 Напоминание: миссии находятся в атрибуте missions (с декоратором, и поэтому он публично доступен) в классе UAV"""

classes = []
for x in drone_catalog:
    x = MultirotorUAV(drone_catalog[x]['weight'], x, drone_catalog[x]['brand'])
    for p in data:
        for mission in data[p]['missions']:
            if x.get_model() == mission['drone']:
                # print(mission['mission'])
                x.missions = mission['mission']
    classes.append(x)

"""TODO 4-4 Напишите код, который выводит информацию по заданной модели дрона. Состав информации: масса, производитель, количество отлетанных миссий (название модели пользователь вводит с клавиатуры в любом регистре, но без опечаток) Подсказка: для этого вам необходимо вернуться в ЗАДАНИЕ 3 и добавить в класс два публичных метода: get_info(), который выводит нужную информацию, и get_model, который позволит получить название модели дрона"""

inpt = input("Model: ")
for x in classes:
    if x.get_model().lower() == inpt.lower():
        print(x.get_info())
        break

